package keyWords;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.Set;

import Data_Reader.GetData;
import Results.ResultXml;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import base.Base;


public class Keywords {
	
	Base base = new Base();
	WebDriver driver= base.getDriver();
	Logger log= Base.log;
	static String parent;
	static boolean fileexist=false;
	LocatorsHandler loc = new LocatorsHandler();
	ResultXml res = new ResultXml();
	
	
//=============== handling Get operation ===================================
	
	// @param input-TestData,ModuleName,TestCaseName,SenarioDescription
	// @return - null
	
	public void geturl(String testdata, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			
			driver.get(testdata);
			log.info(testdata +" Url is opened");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			e.printStackTrace();
			log.info("unable to open the provided URL "+testdata);
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}
	
	
//=============== handling Click operation ===================================
	
	public void click(String property, String locator, String modulename, String testcaseName, String senarioDescription)
	{
		
		try{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property,locator);
			driver.findElement(loc.locatorHandler(property,locator)).click();
			log.info(locator+" Element Clicked");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.info(locator+"Unable to click Element");
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}

//=============== handling sendkeys operation ===================================
	
	public void sendkeys(String property,String locator,String testData, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
			String enteryData= getAndSend(testData, modulename, testcaseName, senarioDescription);
			driver.findElement(loc.locatorHandler(property,locator)).sendKeys(enteryData);
			log.info(enteryData+" value is entereed in "+locator+" Element");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
			log.info("Not able to enter value in "+locator+" Element");
			e.printStackTrace();
		}
	}
	
//=============== handling Clear operation ===================================
	
	public void clearField(String property,String locator, String modulename, String testcaseName, String senarioDescription)
	{
		
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
			driver.findElement(loc.locatorHandler(property,locator)).clear();
			log.info(locator+" Element is cleared");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			e.printStackTrace();
			log.info("Not able to clear"+locator);
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}

//=============== Catching getText operation ===================================
	
	public String gettingText(String property,String locator, String modulename, String testcaseName, String senarioDescription)
	{
		String textRetrived;
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
			textRetrived=driver.findElement(loc.locatorHandler(property,locator)).getText();
			log.info(textRetrived+" text is reterived from the '"+locator+"' locator");
			//xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			textRetrived="Not able to retrive the text";
			log.info("Not able to retrive text from "+locator);
			e.printStackTrace();
			//xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	
		
		return textRetrived;
	}
	
	
//=============== handling move to element operation ===================================	

	public void moveToElement(String property, String locator, String modulename, String testcaseName, String senarioDescription)
	{
		
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
			WebElement e = driver.findElement(loc.locatorHandler(property,locator));
			
			  Actions builder = new Actions(driver);
			  log.info("Action Builder Object is created");
			  Action action = builder.moveToElement(e).build();
			  action.perform();
			  log.info("Moved to the Element "+e+" using Javascript Executer");
			  xmlCall("Pass", modulename, testcaseName, senarioDescription);
		} catch(Exception e)
		{
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
			log.info("unable to Move to the Element using Javascript Executer");
			e.printStackTrace();
		}
	}
	

//=============== handling Java script executer click operation ===================================
	
	public void javaScriptClick(String property, String locator, String modulename, String testcaseName, String senarioDescription)
	{
		
		try
		{
			String subString,mainString;
			WebDriverWait wait= new WebDriverWait(driver,30);
			   subString =locator.substring(0,1);
			   mainString=locator.substring(2);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(mainString)));
			highlightElement(property, locator);
			
			  if(subString.equalsIgnoreCase("j"))	// for tag name
				{
				  JavascriptExecutor js = (JavascriptExecutor)driver; 
				  js.executeScript("return document.getElementById('"+mainString+"').click()");
				 // log.info("Java script Click is performed on ")
				}
			  xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			e.printStackTrace();
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}
	
//=============== handling Java script executer click operation ===================================
	
	public void uploadViaRobt(String sheetName, String testdata, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			GetData d= new GetData();
			
			String path,mainString;
			String []s1=testdata.split("@");
			String []s2=s1[1].split(",");
			int row,col;
			row=Integer.parseInt(s2[0]);
			col=Integer.parseInt(s2[1]);
			mainString=sheetName.substring(3);
			path=d.getFilename(s2[0],mainString,row, col);
			path = path.toUpperCase();
			  Robot r = new Robot();
			  int ar[]= new int[path.length()];
			  
			  			  
			  for(int i=0;i<path.length();i++)
			  {
				  ar[i]=path.charAt(i);
				 				   					 
				 if(ar[i]==':')
					 {
					 Thread.sleep(100);
					    r.keyPress(KeyEvent.VK_SHIFT);  
			            r.keyPress(KeyEvent.VK_SEMICOLON);  
			            r.keyRelease(KeyEvent.VK_SEMICOLON);  
			            r.keyRelease(KeyEvent.VK_SHIFT);
					 }else  if(ar[i]=='\\')
					 {
						 Thread.sleep(100);
						 r.keyPress(KeyEvent.VK_BACK_SLASH);
						 r.keyRelease(KeyEvent.VK_BACK_SLASH);
					 } else if(ar[i]=='.')
					 {
						 Thread.sleep(100);
						 r.keyPress(KeyEvent.VK_PERIOD);
						 r.keyRelease(KeyEvent.VK_PERIOD);
					 } else if(ar[i]==' ')
					 {
						 Thread.sleep(100);
						 r.keyPress(KeyEvent.VK_SPACE);
						 r.keyRelease(KeyEvent.VK_SPACE);
					 }
					 
					 else 
					 {
						Thread.sleep(100);
						 r.keyPress(ar[i]);
						 r.keyRelease(ar[i]);
					 }  
										
				 
			}
			  			 
			  Thread.sleep(500);
			  r.keyPress(KeyEvent.VK_ENTER);
			  xmlCall("Pass", modulename, testcaseName, senarioDescription);
			
		}catch(Exception e)
			{
				e.printStackTrace();
				xmlCall("Fail", modulename, testcaseName, senarioDescription);
			}
	}

//=============== handling get data from other sheet and Return===================================
	public String getAndSend(String testData, String modulename, String testcaseName, String senarioDescription)
	{
		String locator;
		GetData d= new GetData();
		int row,col;
		
			log.info("GetAndSend method Called");
			if(testData.contains("path_"))
		{
		String []sheet1 = testData.split("_");
		String []sheet2 = sheet1[1].split("@");
		String []sheet3 = sheet2[1].split("/");
		String []cell1=sheet3[1].split(",");
		row=Integer.parseInt(cell1[0]);
		col=Integer.parseInt(cell1[1]);
		System.out.println("String 2:"+sheet2[0]);
		locator=d.getFilename(sheet2[0],sheet3[0],row,col);
		System.out.println("Value in getSend:" +locator);
		return locator;
		}else
		{
			log.info("GetAndSend returned testdata directly");
			return testData;
		}
		
	}
	
//=============== handling Selected ===================================
	
	public void select(String property, String locator, String modulename, String testcaseName, String senarioDescription)
	{
		
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
		if(!driver.findElement(loc.locatorHandler(property, locator)).isSelected())
		{
			log.info(locator+" checkbox is not selected already");
			driver.findElement(loc.locatorHandler(property, locator)).click();
			log.info(locator+" checkbox is being selected now");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}else
		{
			log.info(locator+" is already selected");
		}
		}catch(Exception e)
		{
			e.printStackTrace();
			log.info("Not able to select "+locator+" element");
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}
	
//=============== handling deSelected ===================================
	
	public void deSelect(String property, String locator, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			myWait(property,locator, modulename, testcaseName, senarioDescription);
			highlightElement(property, locator);
		if(driver.findElement(loc.locatorHandler(property, locator)).isSelected())
		{
			log.info(locator+" checkbox is selected already");
			driver.findElement(loc.locatorHandler(property,locator)).click();
			log.info(" unchecked the following"+locator+" check box");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}else
		{
			log.info(locator+" is already deselected");
		}
		} catch(Exception e)
		{
			log.info("Not able to deselect "+locator+" element");
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}
	
//=============== Switching to Child Window ===================================
	
	public void switchWindow(String locator, String modulename, String testcaseName, String senarioDescription)
	{
		String parent = driver.getWindowHandle();
		Set<String> winlist= driver.getWindowHandles();
		log.info("No of windows opened are :"+winlist.size());
		try
		{
		if(winlist.size()>1)
		{
			String [] loc = locator.split("_");
			int count=0;
			for (String s : winlist)
			{
				driver.switchTo().window(s);
				if(driver.getTitle().equals(loc[1]))
				{
					log.info("Driver is on :"+loc[1]);
					break;
					
				}
				count++;
			}
			if(count==winlist.size())
			{
				log.info("Windows were exist but expected '"+loc[1]+"' Window not found in the opned windows");
				driver.switchTo().window(parent);
			}
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}else
			{
				log.info("No additional window is opened");
			}
		} catch(Exception e)
		{
			e.printStackTrace();
			log.info("Not able to perform switch to window to "+locator);
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}

//=============== getCurrentURL ===================================
	
		public void getCurrentURL( String modulename, String testcaseName, String senarioDescription)
		{
			try
			{
			driver.getCurrentUrl();
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				xmlCall("Fail", modulename, testcaseName, senarioDescription);
			}
		}
	
//=============== Switching to Parent Window ===================================
	
	public void switchToParent( String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			driver.switchTo().window(parent);
			log.info("Swicthed to Parent");
			xmlCall("Pass", modulename, testcaseName, senarioDescription);
		}catch(Exception e)
		{
			xmlCall("Fail", modulename, testcaseName, senarioDescription);
		}
	}
	
//=============== handling Wait operation ===================================
	
	public void myWait(String property,String locator, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			WebDriverWait wait= new WebDriverWait(driver,30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(loc.locatorHandler(property,locator)));
		}catch(Exception e){e.printStackTrace();}
	}
	
	//=============== handling Verifications ===================================	

	public void verifyContentMatch(String property, String locator,String expected, String modulename, String testcaseName, String senarioDescription)
	{
		try
		{
			String actualText= gettingText(property, locator, modulename, testcaseName, senarioDescription);
			log.info("Expected Text:"+expected);
			if(actualText.equalsIgnoreCase(expected.trim()))
			{
				xmlCall("Pass", modulename, testcaseName, senarioDescription);
			}
			else
			{
				xmlCall("Fail", modulename, testcaseName, senarioDescription);
			}
			
		}catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	//=============== handling Verifications ===================================
	
	public void xmlCall(String result, String modulename, String testcaseName, String senarioDescription)
	{
		if(fileexist)
		{
			res.updateXml(modulename, testcaseName, senarioDescription, result);
		}
		else
		{
			fileexist = true;
			res.createXml("suiteName");
			res.updateXml(modulename, testcaseName, senarioDescription , result);
			
		}
		
	}
	
	//=============== Code to Highlight web Element ===================================
	
	public void highlightElement(String property, String locator) 
	{ 
		WebElement element = driver.findElement(loc.locatorHandler(property,locator));
		Base.log.info("Highlight function called: Received keyword"+property+" Recived Locator"+locator);
		System.out.println("webelemnt:"+element);
		for (int i = 0; i < 2; i++) 
		{ 
			JavascriptExecutor js = (JavascriptExecutor) driver;
			if(i==0)
			{
				js.executeScript("arguments[0].setAttribute('style', arguments[1]);", element, "color: yellow; border: 3px solid red;");
			}else
			{
				js.executeScript("arguments[0].setAttribute('style', arguments[1]);", element, "color: yellow; border: 3px solid green;");
			}
			
					try 
					{
						Thread.sleep(150);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
			js.executeScript("arguments[0].setAttribute('style', arguments[1]);", element, ""); 
					try 
					{
						Thread.sleep(150);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
		}
	}
	
	
//=============== END =====================  END ============== END =====================
}
